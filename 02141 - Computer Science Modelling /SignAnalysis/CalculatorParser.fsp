// Open the file that defines the type "expr" we shall use as AST
%{
open CalculatorTypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <string> VAR
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF CON SCON DIS SDIS NEG EQ NEQ LGT LGET RGT RGET TRUE FALSE ASSIGN IF FI OD DO SKIP WHILE OR SEP SQRT
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions


// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left EQ NEQ LGT LGET RGT RGET
%left PLUS MINUS DIS SDIS CON SCON
%left TIMES DIV NEG
%left SQRT
%right POW 


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <Cexpr> start
%type <Aexpr> Aexpression
%type <Bexpr> Bexpression
%type <Cexpr> Cexpression
%type <GCexpr> GCexpression

// Grammar productions
%%

// The first production in "formal" notation is
// start -> Cexpression
// here written:
start: Cexpression EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:
Aexpression:
  | Aexpression TIMES Aexpression	{ TimesExpr($1,$3) }
  | Aexpression DIV Aexpression		{ DivExpr($1,$3) }
  | SQRT Aexpression				{ SqrtExpr($2)}
  | Aexpression PLUS Aexpression	{ PlusExpr($1,$3) }
  | Aexpression MINUS Aexpression	{ MinusExpr($1,$3) }
  | Aexpression POW Aexpression		{ PowExpr($1,$3) }
  | PLUS Aexpression				{ UPlusExpr($2) }
  | MINUS Aexpression				{ UMinusExpr($2) }
  | NUM								{ Num($1) }
  | LPAR Aexpression RPAR			{ $2 }
  | VAR								{ Var($1) }

Bexpression:
  | Bexpression CON Bexpression		{ ConExpr($1,$3) }
  |	Bexpression SCON Bexpression	{ SconExpr($1,$3) }
  |	Bexpression DIS Bexpression		{ DisExpr($1,$3) }
  |	Bexpression SDIS Bexpression	{ SdisExpr($1,$3) }
  |	NEG Bexpression					{ NegExpr($2) }
  |	Aexpression EQ Aexpression		{ EqExpr($1,$3) }
  | Aexpression NEQ Aexpression		{ NeqExpr($1,$3) }
  |	Aexpression LGT Aexpression		{ LgtExpr($1,$3) }
  |	Aexpression LGET Aexpression	{ LgetExpr($1,$3) }
  |	Aexpression RGT Aexpression		{ RgtExpr($1,$3) }
  |	Aexpression RGET Aexpression	{ RgetExpr($1,$3) }
  |	FALSE							{ FalseExpr }
  | TRUE							{ TrueExpr }
  | LPAR Bexpression RPAR			{ $2 }

Cexpression:
  |	VAR	ASSIGN Aexpression			{ AssignExpr($1,$3) }
  |	SKIP							{ SkipExpr }
  | Cexpression SEP Cexpression		{ SepExpr($1,$3) }
  |	IF GCexpression FI				{ IfExpr($2) }
  |	DO GCexpression OD				{ DoExpr($2) }

GCexpression:
  |	Bexpression	WHILE Cexpression	{ WhileExpr($1,$3) }
  |	GCexpression OR GCexpression	{ OrExpr($1,$3) }


// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
